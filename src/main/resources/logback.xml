<?xml version="1.0" encoding="UTF-8"?>
<!--   scan属性设置为true时，当配置文件发生变化时将会重新加载配置文件
   scanPeriod属性设置扫描配置文件看是否有变化的时间间隔，若配置文件有变化则重新加载配置文件，不需要重启服务器
   debug:为true时会实时查看logback的运行状态-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--定义参数常量-->
    <!--TRACE<DEBUG<INFO<WARN<ERROR-->
    <!--logger对象日志输出级别-->
    <property name="log.level" value="debug"/>
    <!--文件要保留多长时间-->
    <property name="log.maxHistory" value="10"/>
    <!--日志存储的根路径-->
    <property name="log.filePath" value="${catalina.base}/logs/webapps"/>
    <!--日志展现的格式-->
    <property name="log.pattern"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS}[%thread]%-5level%logger{50}-%msg%n"/>
    <!--将日志输出到什么地方-->

    <!--控制台设置-->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!--DEBUG-->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.filePath}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--INFO-->
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径:往info.log中去写当天日志-->
        <file>${log.filePath}/info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--文件名称：分离出来的文件的命名夹规则${log.filePath}/info/，第二天压缩前一天的日志文件进入压缩包.gz：info.%d{yyyy-MM-dd}.log.gz-->
            <fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--文件最大保存历史数量：${log.filePath}/info下最大保存的压缩文件数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--ERROR-->
    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.filePath}/error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!--存放日志对象、告诉logback需要关注哪个package下的信息,level告诉logback我们的logger仅
    记录哪个日志级别以上的信息-->
    <!-- additivity="true":logger会将root下的appender也放到logger中，
    即logger也支持在控制台输出相关信息，并且此时level也遵循looger下指定的level-->
    <logger name="com.xufangfang.o2o" level="${log.level}" additivity="true">
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>

    <!--父logger:若logger没有指定level，则默认的继承root下的level-->
    <root level="info">
        <appender-ref ref="consoleAppender"/>
    </root>

</configuration>